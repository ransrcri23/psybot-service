name: Automated Tests

on:
  push:
    branches: [ main, develop, Reto6 ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=psybot.settings" >> $GITHUB_ENV
        echo "MONGO_HOST=mongo" >> $GITHUB_ENV
        echo "MONGO_PORT=27017" >> $GITHUB_ENV
        echo "MONGO_DB_NAME=psybot_test_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=fake-key-for-testing" >> $GITHUB_ENV
        echo "GEMINI_MODEL=gemini-1.5-flash" >> $GITHUB_ENV
        echo "GEMINI_TEMPERATURE=0.7" >> $GITHUB_ENV
        echo "GEMINI_MAX_TOKENS=1000" >> $GITHUB_ENV
    
    - name: Wait for MongoDB to be ready
      run: |
        for i in $(seq 1 30); do
          if nc -z mongo 27017; then
            echo "MongoDB is ready!"
            break
          fi
          echo "Waiting for MongoDB... ($i/30)"
          sleep 2
        done
    
    - name: Run Django migrations
      run: |
        python manage.py migrate --noinput
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --disable-warnings
    
    - name: Run BDD tests (if available)
      run: |
        if [ -f "run_bdd_tests.py" ]; then
          python run_bdd_tests.py || true
        fi
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Unit tests completed" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š Check the logs above for detailed results" >> $GITHUB_STEP_SUMMARY
